openapi: 3.0.0

info:
  title: Типовой API-справочник для работы с пользователями 
  description: Типовой API-справочник для создания, получения, обновления и удаления информации о пользователях (разр. Зорин В.В.)
  version: 2.0.0

security:
  - api_key: []

servers:
# - url: https://api.documentat.io/api/prod
#   description: Основной сервер
# - url: https://api.documentat.io/api/dev
#    description: Тестовый сервер
  - url: https://jsonplaceholder.typicode.com
    description: Тестовый сервер без авторизации

paths:
  /users:
    get:
      summary: Получить список всех пользователей
      operationId: usersGET
      tags:
        - users
      parameters:
        - name: limit
          in: query
          required: false
          description: Максимальное количество элементов на странице
          example: 10
          schema:
            type: integer
            default: 10
      responses:
        '200':
          $ref: '#/components/responses/UserListSuccess'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Создать нового пользователя
      operationId: usersPOST
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          $ref: '#/components/responses/UserCreationSuccess'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'

  /users/{id}:
    get:
      summary: Получить информацию о пользователе 
      operationId: usersIdGET
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор пользователя
          example: 123
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      summary: Обновить всю информацию о пользователе
      operationId: usersIdPUT
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор пользователя
          example: 724
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '200':
          $ref: '#/components/responses/UserUpdateSuccess'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      summary: Обновить часть информации о пользователе
      operationId: usersIdPATCH
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор пользователя
          example: 724
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialUserUpdate'
      responses:
        '200':
          $ref: '#/components/responses/UserUpdateSuccess'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/ServerError'
    
    delete:
      summary: Удалить пользователя
      operationId: usersIdDELETE
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор пользователя
          example: 123
          schema:
            type: integer
      responses:
        '204':
          $ref: '#/components/responses/UserDeleteSuccess'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/UserNotFound'
        '500':
          $ref: '#/components/responses/ServerError'


components:
  schemas:
    User:
      type: object
      required:
        - id
        - username
        - email
        - firstName
        - lastName
        - address
        - age
        - isEmployee
        - accountStatus
      properties:
        id:
          type: integer
          format: int64
          title: Идентификатор 
          description: Уникальный идентификатор пользователя
        username:
          type: string
          title: Логин 
          description: Логин пользователя
        email:
          type: string
          title: Е-mail
          description: Электронная почта пользователя
          format: e-mail
        firstName:
          type: string
          title: Имя 
          description: Имя пользователя
        lastName:
          type: string
          title: Фамилия
          description: Фамилия пользователя
        address:
          type: object
          title: Адрес 
          description: Адрес местонахождения пользователя
          properties:
            country:
              type: string
              title: Страна 
              description: Страна местонахождения
            city:
              type: string
              title: Город
              description: Город
            street:
              type: string
              title: Улица
              description: Улица
            house:
              type: string
              title: Дом
              description: Дом
          required:
            - country
            - city
            - street
            - house
        age:
          type: integer
          description: Количество полных лет
          title: Возраст
          format: int32
        isEmployee:
          type: boolean
          title: Занятость
          description:  Пользователь работает или безработный
        accountStatus:
          type: string
          title: Статус
          description: Статус активности аккаунта пользователя

    CreateUser:
      type: object
      required:
        - username
        - email
        - firstName
        - lastName
        - address
        - age
        - isEmployee
        - accountStatus
      properties:
        username:
          type: string
          title: Логин 
          description: Логин пользователя
          example: User724
        email:
          type: string
          title: Е-mail
          description: Электронная почта пользователя
          example: user123@usertableone.com
        firstName:
          type: string
          title: Имя 
          description: Имя пользователя
          example: Иван
        lastName:
          type: string
          title: Фамилия
          description: Фамилия пользователя
          example: Иванов
        address:
          type: object
          title: Адрес 
          description: Адрес местонахождения пользователя
          properties:
            country:
              type: string
              title: Страна 
              description: Страна
              example: США
            city:
              type: string
              title: Город
              description: Город
              example: Бостон
            street:
              type: string
              title: Улица
              description: Улица
              example: Земляничная
            house:
              type: string
              title: Дом
              description: Дом  
              example: 12
          required:
            - country
            - city
            - street
            - house              
        age:
          type: integer
          description: Количество полных лет
          title: Возраст
          format: int32
          example: 35
          maximum: 150
          minimum: 16
        isEmployee:
          type: boolean
          title: Занятость
          description:  Пользователь работает или безработный
          default: true
        accountStatus:
          type: string
          title: Статус
          description: Статус активности аккаунта пользователя
          default: active
          enum:
            - active
            - inactive
            - suspended

    PartialUserUpdate:
      type: object
      properties:
        username:
          type: string
          title: Логин 
          description: Логин пользователя
          example: User724
        email:
          type: string
          title: Е-mail
          description: Электронная почта пользователя
          example: user123@usertableone.com
        firstName:
          type: string
          title: Имя 
          description: Имя пользователя
          example: Иван
        lastName:
          type: string
          title: Фамилия
          description: Фамилия пользователя
          example: Иванов
        address:
          type: object
          title: Адрес
          description: Адрес местонахождения пользователя
          properties:
            country:
              type: string
              title: Страна 
              description: Страна местонахождения
              example: США
            city:
              type: string
              title: Город
              description: Город
              example: Бостон
            street:
              type: string
              title: Улица
              description: Улица
              example: Земляничная
            house:
              type: string
              title: Дом
              description: Дом
              example: 12
        age:
          type: integer
          description: Количество полных лет
          title: Возраст
          format: int32
          example: 35
          maximum: 150
          minimum: 16
        isEmployee:
          type: boolean
          title: Занятость
          description:  Пользователь работает или безработный
          default: true
        accountStatus:
          type: string
          title: Статус
          description: Статус активности аккаунта пользователя
          default: active
          enum:
            - active
            - inactive
            - suspended

    error:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: integer
          format: int32
          title: Код
          description: Код ошибки
        message:
          type: string
          title: Описание
          description: Описание ошибки

  responses:
    UserListSuccess:
      description: Список пользователей успешно получен
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'

    Success:
      description: Данные успешно получены
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    UserCreationSuccess:
      description: Пользователь успешно создан
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    UserUpdateSuccess:
      description: Данные пользователя успешно обновлены
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    UserDeleteSuccess:
      description: Пользователь успешно удален

    UserNotFound:
      description: Пользователь не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'

    Unauthorized:
      description: Нет авторизации
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'

    Conflict:
      description: "Конфликт состояния ресурса"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'

    MethodNotAllowed:
      description: Метод не поддерживается
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'

    ServerError:
      description: Ошибка сервера
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'

    UnprocessableEntity:
      description: Некорректное содержание запроса 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'

  securitySchemes:
    api_key:
      type: apiKey
      name: Token
      in: header

tags:
  - name: users
    description: Операции с пользователями